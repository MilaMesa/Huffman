package View;

import Controller.Huffman;

import javax.swing.*;
import javax.swing.text.DefaultCaret;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author María Camila Caicedo Mesa CC:1037656070
 */
public class MainWindow extends javax.swing.JFrame {

    private Huffman x;

    public MainWindow() {
        initComponents();
        labelMainText.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanel mainPanel = new JPanel();
        labelMainText = new javax.swing.JLabel();
        textFieldPath = new javax.swing.JTextField();
        JButton buttonSearch = new JButton();
        buttonCompress = new javax.swing.JButton();
        buttonDecompress = new javax.swing.JButton();
        JScrollPane jScrollPane1 = new JScrollPane();
        textAreaOUT = new javax.swing.JTextArea();
        JLabel labelTextOUT = new JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compresor de texto Huffman");
        setLocationByPlatform(true);

        labelMainText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelMainText.setText("Compresión y descompresión binaria por el método Huffman");

        textFieldPath.setText("Selecciona un archivo a comprimir...");
        textFieldPath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldPathFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldPathFocusLost(evt);
            }
        });

        buttonSearch.setText("Examinar");
        buttonSearch.setFocusable(true);
        buttonSearch.addActionListener(this::buttonSearchActionPerformed);

        buttonCompress.setText("Comprimir");
        buttonCompress.setEnabled(false);
        buttonCompress.addActionListener(this::buttonCompressActionPerformed);

        buttonDecompress.setText("Descomprimir");
        buttonDecompress.setEnabled(false);
        buttonDecompress.addActionListener(this::buttonDecompressActionPerformed);

        textAreaOUT.setEditable(false);
        textAreaOUT.setColumns(20);
        textAreaOUT.setLineWrap(true);
        textAreaOUT.setRows(5);
        textAreaOUT.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(textAreaOUT);
        DefaultCaret caret = (DefaultCaret) textAreaOUT.getCaret();
        caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);

        labelTextOUT.setText("Información de salida");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(textFieldPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(buttonCompress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonDecompress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(labelMainText)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(labelTextOUT)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(labelMainText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(textFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(buttonSearch))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonCompress)
                                .addGap(2, 2, 2)
                                .addComponent(buttonDecompress)
                                .addGap(2, 2, 2)
                                .addComponent(labelTextOUT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }

    private void buttonDecompressActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (textFieldPath.getText().split("\\.")[1].equalsIgnoreCase("arq")) {
                try {
                    x = new Huffman(new File(textFieldPath.getText()));
                    textAreaOUT.setText(x.decompress());
                } catch (IOException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "No se encontró el archivo especificado.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Para descomprimir se necesita un archivo con extención '.arq'.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Por favor especifique una ruta de archivo.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buttonCompressActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (textFieldPath.getText().split("\\.")[1].equalsIgnoreCase("txt")) {
                try {
                    x = new Huffman(new File(textFieldPath.getText()));
                    textAreaOUT.setText(x.compress());
                } catch (IOException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "No se encontró el archivo especificado.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Para comprimir se necesita un archivo con extención '.txt'.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        chooseFile(textFieldPath);
    }

    private void textFieldPathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldPathFocusLost
        if (textFieldPath.getText().equals("")) {
            textFieldPath.setText("Selecciona un archivo a comprimir...");
        }
    }

    private void textFieldPathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldPathFocusGained
        if (textFieldPath.getText().equals("Selecciona un archivo a comprimir...")) {
            textFieldPath.setText("");
        }
    }

    private void chooseFile(JTextField label) {
        JFileChooser jf = new JFileChooser();
        jf.showOpenDialog(this);
        File localFile = jf.getSelectedFile();
        if (localFile != null) {
            label.setText(localFile.getAbsolutePath());
            if (localFile.getName().contains(".txt")) {
                buttonCompress.setEnabled(true);
                buttonDecompress.setEnabled(false);
            } else if (localFile.getName().contains(".arq")) {
                buttonCompress.setEnabled(false);
                buttonDecompress.setEnabled(true);
            } else {
                buttonCompress.setEnabled(false);
                buttonDecompress.setEnabled(false);
                JOptionPane.showMessageDialog(null, "El archivo debe ser .txt o .arq para poder comprimir o descomprimirlo", "Archivo no compatible", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            new MainWindow().setVisible(true);
        });
    }

    private javax.swing.JButton buttonCompress;
    private javax.swing.JButton buttonDecompress;
    private javax.swing.JLabel labelMainText;
    private javax.swing.JTextArea textAreaOUT;
    private javax.swing.JTextField textFieldPath;
}
